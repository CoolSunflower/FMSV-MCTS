spec_name,signal_name,information
hpdmc,NA,"Here is the mapping information:
[sys_clk]: System clock signal. Drives the core logic of the memory controller, used for synchronizing operations.
[sys_clk_n]: Complementary (inverted) system clock signal. Used alongside `sys_clk` to provide differential clocking.
[dqs_clk]: Data Strobe Clock. Used in DDR interfaces to align data transfers with memory clock edges.
[dqs_clk_n]: Complementary Data Strobe Clock. Provides inverted clocking for differential data transfer.
[sys_rst]: System Reset. Resets internal logic to ensure proper start-up and initialization of the memory controller.
[csr_a]: Address for CSR (Control and Status Register). Used for identifying specific registers within the memory controller during configuration.
[csr_we]: Write Enable for CSR. Indicates when a write operation to CSR registers is active.
[csr_di]: Data Input for CSR. Represents data coming from the CPU to configure or control specific settings within the memory controller.
[csr_do]: Data Output for CSR. Used by the CPU to read the current status or configuration from the memory controller.
[fml_adr]: Address input for Fast Memory Link (FML). Points to specific memory addresses in the SDRAM.
[fml_stb]: Strobe signal for FML transactions. Signals a valid transaction on the FML bus.
[fml_we]: Write Enable for FML. Specifies whether the current FML transaction is a read (inactive) or write (active) operation.
[fml_ack]: Acknowledge signal for FML transactions. Indicates successful completion of a memory operation.
[fml_di]: Data Input for FML. Carries data from CPU to SDRAM through FML for write operations.
[fml_do]: Data Output for FML. Holds data read from SDRAM that is sent to the CPU.
[sdram_cke]: SDRAM Clock Enable. Controls the SDRAM clocking for power-saving modes and initialization sequences.
[sdram_cs_n]: SDRAM Chip Select (active low). Enables or disables the SDRAM chip during operations.
[sdram_we_n]: SDRAM Write Enable (active low). Controls write operations to SDRAM, in combination with other signals.
[sdram_cas_n]: SDRAM Column Address Strobe (active low). Selects specific columns in SDRAM for data access.
[sdram_ras_n]: SDRAM Row Address Strobe (active low). Selects specific rows in SDRAM for data access.
[sdram_adr]: SDRAM Address bus. Carries the row and column addresses during SDRAM operations.
[sdram_ba]: SDRAM Bank Address. Selects the specific bank within SDRAM memory.
[sdram_dm]: SDRAM Data Mask. Used to mask or ignore certain bytes during a write operation to SDRAM.
[dqs_psen]: DQS Phase Shift Enable. Allows the CPU to adjust the phase of the DQS signal for timing alignment in data transfers.
[dqs_psincdec]: DQS Phase Shift Increment/Decrement. Allows fine adjustments to the phase shift of DQS.
[dqs_psdone]: DQS Phase Shift Done. Indicates when the DQS phase shift adjustment is complete.
[pll_stat]: PLL Status. Monitors the Phase-Locked Loop (PLL) status, ensuring stable clock signals for SDRAM operations.
Here is the workflow information:

"
hpdmc,sys_clk,"Here’s the extracted information on the `sys_clk` (System clock) signal based on the provided design specification:
**[Signal name]:** sys_clk
**[Description]:**
  - **[Definition]:** System clock used to synchronize various internal modules in the HPDMC (High-Performance Dynamic Memory Controller). This clock drives several critical operations, ensuring data and command synchronization across different modules.
  - **[Functionality]:** 
    - The system clock drives the ODDR (Output Double Data Rate) and IDDR (Input Double Data Rate) primitives. These elements are essential for managing data synchronization when interacting with the DDR SDRAM.
    - When writing data to the DDR SDRAM, data is synchronized on both the rising and falling edges of `sys_clk` to ensure seamless timing alignment between the FML bus and the SDRAM.
    - During read operations, `sys_clk` is used to align data capture by delaying incoming data by a quarter of a clock cycle, ensuring that it is center-aligned with `sys_clk` edges.
  - **[Interconnection]:**
    - Interacts with the DQS clock signal, especially with a 90-degree phase shift to optimize the timing margins for reading and writing operations. This delay mechanism is configured using the delay register to match system requirements.
  - **[Additional information]:**
    - The system clock requires a stable differential clock, typically generated by a dedicated FPGA resource like a DCM (Digital Clock Manager).
    - IDELAYCTRL (Input Delay Control) may be needed to control the delay accurately, providing further tuning to match the desired system performance requirements.
**[Related Signals]:** DQS, IDELAY, ODDR, IDDR, FML"
hpdmc,sys_clk_n,"Here's the extracted information on the `sys_clk_n` (Complementary System Clock Signal) based on the provided design specification:
**[Signal name]:** sys_clk_n
**[Description]:**
  - **[Definition]:** Complementary (inverted) system clock used alongside `sys_clk` to support differential clocking for the SDRAM.
  - **[Functionality]:**
    - The complementary clock `sys_clk_n` works with `sys_clk` to provide a stable differential clock to the SDRAM chips.
    - This differential clocking is designed to reduce noise and improve timing accuracy, essential for high-frequency memory operations.
    - It is crucial that the differential clock is generated by a dedicated FPGA clocking resource, such as a Digital Clock Manager (DCM), to ensure low latency and minimal jitter.
  - **[Interconnection]:**
    - `sys_clk_n` should not be implemented with a simple inverter on the `sys_clk` line, as this would introduce unwanted delays, degrading signal integrity. The DCM manages both `sys_clk` and `sys_clk_n` to maintain accurate phase alignment.
    - Works in conjunction with the DQS phase adjustment, which is configured through specific delay settings, optimizing read and write cycles.
  - **[Additional information]:**
    - If additional timing control is needed, IDELAYCTRL can be used to adjust the delay on data lines, indirectly affecting the effective timing of `sys_clk` and `sys_clk_n`.
**[Related Signals]:** sys_clk, DQS, IDELAY, DCM"
hpdmc,dqs_clk,"Here’s the extracted information on the `dqs_clk` (Data Strobe Clock) signal based on the provided design specification:
**[Signal name]:** dqs_clk
**[Description]:**
  - **[Definition]:** Data Strobe Clock (DQS) signal used primarily for timing control during data transfers between the HPDMC and DDR SDRAM.
  - **[Functionality]:**
    - The `dqs_clk` signal manages the timing for data alignment, essential during read and write operations with the DDR SDRAM.
    - Typically, a 90-degree phase shift is applied to `dqs_clk` to provide optimal timing margins during these operations.
    - The phase of `dqs_clk` is adjustable, controlled through dedicated signals: `dqs_psen`, `dqs_psincdec`, and `dqs_psdone`. These signals interact with the Digital Clock Manager (DCM) to adjust and confirm phase shifts as required.
  - **[Interconnection]:**
    - `dqs_clk` requires connection to a DCM for accurate phase control and stability. The phase shift between `sys_clk` and `dqs_clk` helps to center-align data, enabling efficient data capture.
    - Works alongside IDELAY and other delay controls to fine-tune the timing of data inputs and outputs.
  - **[Additional information]:**
    - The DCM status for `dqs_clk` phase adjustments can be monitored using the `pll_stat` input signals, ensuring readiness and accuracy in clock management.
    - This phase-shift control allows for incremental adjustment by configuring the delay register, making it adaptable to varying system requirements.
**[Related Signals]:** sys_clk, dqs_psen, dqs_psincdec, dqs_psdone, IDELAY, DCM"
hpdmc,dqs_clk_n,"Here’s the extracted information on the `dqs_clk_n` (Complementary Data Strobe Clock) signal based on the provided design specification:
**[Signal name]:** dqs_clk_n
**[Description]:**
  - **[Definition]:** Complementary (inverted) Data Strobe Clock, typically used in differential clocking setups to support high-speed data transfers in SDRAM communication.
  - **[Functionality]:**
    - Works alongside `dqs_clk` to create a differential strobe signal for precise timing alignment during data read and write operations.
    - Provides noise reduction and enhanced signal integrity in conjunction with `dqs_clk` by forming a differential signal pair.
    - Maintains a 90-degree phase shift relationship with `sys_clk` to improve timing margins, a configuration set and managed through the Digital Clock Manager (DCM).
  - **[Interconnection]:**
    - Interfaced directly with `dqs_clk` as its complementary signal. Both signals are managed by a dedicated DCM to maintain the required phase shift and differential integrity.
    - This differential setup is crucial for data alignment, especially during high-speed data capture and transmission in SDRAM.
  - **[Additional information]:**
    - Requires stable clock management by the DCM and IDELAYCTRL for precise phase adjustments and signal stability, ensuring efficient alignment with `sys_clk` and `dqs_clk`.
**[Related Signals]:** dqs_clk, sys_clk, DCM, IDELAYCTRL"
hpdmc,sys_rst,"Here’s the extracted information on the `sys_rst` (System Reset) signal based on the provided design specification:
**[Signal name]:** sys_rst
**[Description]:**
  - **[Definition]:** System Reset signal for HPDMC, controlling initialization and reset sequences within the controller.
  - **[Functionality]:**
    - Controls the reset behavior of the HPDMC and various internal modules during initialization and configuration.
    - When asserted, it resets timing registers and holds the controller in an inactive state, especially important during memory subsystem reconfiguration.
    - This signal should remain asserted during the modification of specific control registers, such as the timing register, to avoid timing conflicts and ensure a clean reset of all operations.
    - Once reset and initialization processes are complete, `sys_rst` should be deasserted to allow normal operation.
  - **[Interconnection]:**
    - Interacts with system and timing control registers, particularly impacting the configuration and timing management during the reset phase.
    - Works with the system register to control various initialization states, such as the bypass mode and the enabling/disabling of certain SDRAM commands.
  - **[Additional information]:**
    - A critical part of the SDRAM initialization and reset processes, where it helps configure timing parameters such as `tRP`, `tRCD`, `tREFI`, and `tRFC` in the timing register.
**[Related Signals]:** System register, timing register, SDRAM control signals (e.g., CKE)"
hpdmc,csr_a,"Here’s the extracted information on the `csr_a` (Address for CSR) signal based on the provided design specification:
**[Signal name]:** csr_a
**[Description]:**
  - **[Definition]:** Address line for the Control and Status Register (CSR) bus, used for accessing specific registers within the HPDMC.
  - **[Functionality]:**
    - The `csr_a` signal is part of the CSR bus interface, allowing the CPU to access various control and status registers within the HPDMC.
    - This address is utilized to read and write values to configure the memory controller’s operating parameters, such as setting timings and managing initialization sequences.
    - It enables direct access to registers like the System Register, Bypass Register, Timing Register, and Delay Register by referencing specific offset addresses (e.g., 0x00 for System Register, 0x04 for Bypass Register).
  - **[Interconnection]:**
    - Directly linked to the CSR bus, which is separate from the data bus, allowing low-speed operations that do not interfere with high-speed memory data transfers.
    - `csr_a` interacts with the control interface to fetch configuration details necessary for the SDRAM initialization, timing, and operational mode setup.
  - **[Additional information]:**
    - The CSR bus, using `csr_a`, helps reduce FPGA resource usage by avoiding timing path conflicts on the primary system bus, offering optimized access for setting runtime configurations.
    - This address bus is bridged to the Wishbone bus, where it operates in byte addressing mode for straightforward CPU communication.
**[Related Signals]:** System Register, Bypass Register, Timing Register, Delay Register, CSR bus, Wishbone bus"
hpdmc,csr_we,"Here’s the extracted information on the `csr_we` (Write Enable for CSR) signal based on the provided design specification:
**[Signal name]:** csr_we
**[Description]:**
  - **[Definition]:** Write Enable signal for the Control and Status Register (CSR) bus, used to control write operations on CSR registers within the HPDMC.
  - **[Functionality]:**
    - This signal, when asserted, enables writing data to specific control and status registers on the CSR bus.
    - It allows the CPU to modify configuration settings within HPDMC, such as adjusting timing parameters or enabling/disabling certain functions within the memory controller.
    - `csr_we` is required for updating registers like the System Register, Bypass Register, Timing Register, and Delay Register.
  - **[Interconnection]:**
    - Works directly with the CSR bus to manage write access to registers, ensuring only authorized write actions occur when `csr_we` is asserted.
    - Associated with specific address lines (`csr_a`) to target specific CSR addresses for configuration changes, allowing selective control of HPDMC functionalities.
  - **[Additional information]:**
    - This write enable control aids in configuring runtime parameters of the memory controller by allowing precise, controlled modifications to CSR registers. 
**[Related Signals]:** csr_a, System Register, Bypass Register, Timing Register, Delay Register, CSR bus"
hpdmc,csr_di,"Here’s the extracted information on the `csr_di` (Data Input for CSR) signal based on the provided design specification:
**[Signal name]:** csr_di
**[Description]:**
  - **[Definition]:** Data input line for the Control and Status Register (CSR) bus, used for providing data to be written to specific control registers within the HPDMC.
  - **[Functionality]:**
    - The `csr_di` signal is responsible for carrying the data intended for CSR write operations, used in conjunction with `csr_we` (write enable) and `csr_a` (address).
    - It allows the CPU to input specific data values into control and status registers such as the System Register, Bypass Register, Timing Register, and Delay Register.
  - **[Interconnection]:**
    - Works directly with `csr_we` to ensure data is written only when write operations are enabled, and with `csr_a` to target specific CSR addresses for configuration adjustments.
  - **[Additional information]:**
    - Essential for configuring runtime parameters of the HPDMC, as it provides the required data inputs to set and adjust control registers on the CSR bus.
**[Related Signals]:** csr_we, csr_a, System Register, Bypass Register, Timing Register, Delay Register, CSR bus"
hpdmc,csr_do,"Here’s the extracted information on the `csr_do` (Data Output for CSR) signal based on the provided design specification:
**[Signal name]:** csr_do
**[Description]:**
  - **[Definition]:** Data output line for the Control and Status Register (CSR) bus, which provides readback data from the CSR registers within HPDMC.
  - **[Functionality]:**
    - The `csr_do` signal is responsible for carrying data read from CSR registers back to the CPU, used in read operations on control and status registers.
    - Enables the CPU to access current values from various registers, such as the System Register, Bypass Register, Timing Register, and Delay Register, reflecting the controller's current settings and state.
  - **[Interconnection]:**
    - Works alongside `csr_a` (address) and `csr_we` (write enable) to facilitate read operations on the CSR bus. When `csr_we` is deasserted, `csr_do` outputs the data at the address specified by `csr_a`.
    - Interfaces directly with the CSR bus to provide an efficient path for CPU access to controller settings.
  - **[Additional information]:**
    - Useful for diagnostic and configuration checks by the CPU, as it allows read access to dynamically retrieve the current settings on HPDMC.
**[Related Signals]:** csr_a, csr_we, System Register, Bypass Register, Timing Register, Delay Register, CSR bus"
hpdmc,fml_adr,"Here’s the extracted information on the `fml_adr` (Address input for Fast Memory Link) signal based on the provided design specification:
**[Signal name]:** fml_adr
**[Description]:**
  - **[Definition]:** Address input line for the Fast Memory Link (FML) bus, used to specify the memory address for SDRAM read and write operations.
  - **[Functionality]:**
    - The `fml_adr` signal carries the address information required for accessing SDRAM via the FML interface, supporting burst-oriented memory operations.
    - This address input allows the HPDMC to perform sequential memory transactions on the DDR SDRAM, essential for high-bandwidth applications such as video processing.
    - The FML interface, which includes `fml_adr`, is designed for compatibility with DRAM controllers, simplifying the handling of burst commands.
  - **[Interconnection]:**
    - Directly interfaces with the SDRAM management unit and bus interface within HPDMC, enabling memory command addressing for efficient data management.
    - Works in tandem with other FML signals for command synchronization, including those handling burst lengths and strobe operations.
  - **[Additional information]:**
    - The FML bus, including `fml_adr`, is optimized for continuous high-speed memory access and features a simplified signaling structure that excludes corner cases typically encountered in burst operations, helping reduce logic resource usage on the FPGA.
**[Related Signals]:** FML bus signals (e.g., strobe, data lines), SDRAM management unit"
hpdmc,fml_stb,"Here’s the extracted information on the `fml_stb` (Strobe signal for FML transactions) based on the provided design specification:
**[Signal name]:** fml_stb
**[Description]:**
  - **[Definition]:** Strobe signal for the Fast Memory Link (FML) bus, used to initiate and maintain active FML transactions.
  - **[Functionality]:**
    - The `fml_stb` signal indicates when a new command is ready to be processed and remains asserted while the command is active. This strobe signal asserts in sync with other FML control signals to initiate memory transactions.
    - For continuous commands, `fml_stb` stays asserted until an acknowledgment signal is received, indicating that the command has been successfully completed. After acknowledgment, `fml_stb` should be deasserted if there are no new commands to issue.
  - **[Interconnection]:**
    - It works directly with other FML signals, including `fml_adr` (address) and data lines, as part of the transaction protocol to maintain synchronization.
    - The protocol, based on WISHBONE-like transactions, uses `fml_stb` to control command timing and handshakes within the HPDMC.
  - **[Additional information]:**
    - Part of the simplified FML burst-mode protocol, `fml_stb` helps streamline communication by signaling command readiness and synchronization, minimizing corner-case handling and saving FPGA resources.
**[Related Signals]:** fml_adr, FML acknowledgment signal, data lines, SDRAM management unit"
hpdmc,fml_we,"Here’s the extracted information on the `fml_we` (Write Enable for FML) signal based on the provided design specification:
**[Signal name]:** fml_we
**[Description]:**
  - **[Definition]:** Write Enable signal for the Fast Memory Link (FML) bus, which designates whether the current transaction on the FML bus is a write operation.
  - **[Functionality]:**
    - The `fml_we` signal indicates whether a command to the SDRAM is a write operation (when asserted). If not asserted, the command is interpreted as a read operation.
    - Works in tandem with the FML protocol to differentiate between read and write requests, streamlining data direction for transactions on the memory interface.
    - During FML transactions, `fml_we` helps synchronize write instructions alongside other control signals (e.g., strobe and acknowledgment) to manage the SDRAM efficiently.
  - **[Interconnection]:**
    - Operates closely with `fml_stb` (strobe) and acknowledgment signals, forming part of the FML protocol that initiates and confirms write operations in coordination with the SDRAM management unit.
    - Influences the data path controller to toggle between data read and write modes, ensuring proper data direction and bus availability.
  - **[Additional information]:**
    - Integrated into the FML’s simplified burst-mode communication, `fml_we` helps streamline transaction types while reducing FPGA resource consumption.
**[Related Signals]:** fml_stb, FML acknowledgment signal, data path controller, SDRAM management unit"
hpdmc,fml_ack,"Here’s the extracted information on the `fml_ack` (Acknowledge signal for FML transactions) based on the provided design specification:
**[Signal name]:** fml_ack
**[Description]:**
  - **[Definition]:** Acknowledge signal for the Fast Memory Link (FML) bus, which signals the completion of a transaction on the FML interface.
  - **[Functionality]:**
    - The `fml_ack` signal is asserted by the HPDMC to indicate that the current FML transaction has been processed successfully.
    - Used in response to the `fml_stb` (strobe) signal, `fml_ack` allows synchronized transaction processing by notifying the command initiator (typically the CPU or bus controller) that the command cycle is complete.
    - The signal is designed to work in a handshake-like protocol within the FML, ensuring that new commands can only proceed once the current transaction receives an acknowledgment.
  - **[Interconnection]:**
    - Interacts closely with `fml_stb`, forming part of the transaction protocol on the FML bus for sequential read or write commands.
    - Works with other FML signals, including the address (`fml_adr`) and write enable (`fml_we`), to manage data flow and timing for efficient communication with SDRAM.
  - **[Additional information]:**
    - The FML protocol simplifies acknowledgment handling, reducing latency and optimizing FPGA resource utilization. The `fml_ack` signal is integral to this streamlined burst-mode protocol, ensuring effective command-cycle management and reducing contention on the memory interface.
**[Related Signals]:** fml_stb, fml_adr, fml_we, SDRAM management unit, FML bus"
hpdmc,fml_di,"Here’s the extracted information on the `fml_di` (Data Input for FML) signal based on the provided design specification:
**[Signal name]:** fml_di
**[Description]:**
  - **[Definition]:** Data input line for the Fast Memory Link (FML) bus, used for transferring data from the CPU to the SDRAM via the HPDMC.
  - **[Functionality]:**
    - The `fml_di` signal carries data values intended for write operations on the SDRAM, enabling efficient data transfer within the FML’s burst-oriented structure.
    - Works in conjunction with `fml_we` to ensure data is correctly directed for write operations when the `fml_we` signal is asserted.
  - **[Interconnection]:**
    - Interacts directly with other FML signals, including `fml_we` (Write Enable) and `fml_stb` (Strobe), forming part of the synchronized transaction process for memory writes.
    - Linked to the data path controller to streamline data flow for write operations, ensuring compatibility with SDRAM timing and burst length requirements.
  - **[Additional information]:**
    - As part of the FML protocol, `fml_di` facilitates high-speed data transfer to SDRAM by aligning data with the burst mode, reducing resource utilization on the FPGA.
**[Related Signals]:** fml_we, fml_stb, data path controller, SDRAM management unit"
hpdmc,fml_do,"Here’s the extracted information on the `fml_do` (Data Output for FML) signal based on the provided design specification:
**[Signal name]:** fml_do
**[Description]:**
  - **[Definition]:** Data output line for the Fast Memory Link (FML) bus, used to carry data from the SDRAM to the CPU through HPDMC.
  - **[Functionality]:**
    - The `fml_do` signal outputs data read from the SDRAM, facilitating data transfer back to the CPU or requesting system over the FML interface.
    - It works in tandem with other FML control signals, such as `fml_stb` (strobe) and `fml_ack` (acknowledge), to ensure data validity during read cycles, providing synchronized data transmission within the burst-mode FML protocol.
  - **[Interconnection]:**
    - Directly linked with other FML signals to coordinate data output operations, especially `fml_stb` for initiating read transactions and `fml_ack` for signaling transaction completion.
    - Managed by the data path controller, which oversees data direction and ensures the data aligns correctly with SDRAM timing.
  - **[Additional information]:**
    - Part of the FML’s streamlined protocol designed for efficient high-speed data transfer, `fml_do` supports sustained memory access required in high-bandwidth applications such as video processing.
**[Related Signals]:** fml_stb, fml_ack, data path controller, SDRAM management unit, FML bus"
hpdmc,sdram_cke,"Here’s the extracted information on the `sdram_cke` (SDRAM Clock Enable) signal based on the provided design specification:
**[Signal name]:** sdram_cke
**[Description]:**
  - **[Definition]:** SDRAM Clock Enable (CKE) signal, directly controlling the clock enable pin of the SDRAM.
  - **[Functionality]:**
    - The `sdram_cke` signal is used to manage the active state of the SDRAM clock. It should always be set (enabled) during normal operation, except during specific stages of the initialization sequence.
    - The HPDMC does not support power-down modes for SDRAM, meaning that clearing (`sdram_cke` deasserted) during normal operations can lead to undefined behavior.
    - The signal is directly driven through the System Register, allowing the CPU to set or clear the CKE pin as needed during the SDRAM initialization.
  - **[Interconnection]:**
    - Managed by the System Register in HPDMC, `sdram_cke` is activated in conjunction with other control signals to maintain SDRAM readiness.
    - Works closely with the initialization and reset routines of the HPDMC, specifically managed through CPU-driven commands for direct control over the SDRAM command and address bus during startup and configuration phases.
  - **[Additional information]:**
    - `sdram_cke` requires careful handling during the initialization phase to ensure stable operation of the SDRAM. It should be consistently enabled post-initialization to maintain correct SDRAM functionality.
**[Related Signals]:** System Register, SDRAM command and address bus"
hpdmc,sdram_cs_n,"Here’s the extracted information on the `sdram_cs_n` (SDRAM Chip Select, active low) signal based on the provided design specification:
**[Signal name]:** sdram_cs_n
**[Description]:**
  - **[Definition]:** Active-low Chip Select (CS) signal for SDRAM, used to enable or disable command processing in the SDRAM module.
  - **[Functionality]:**
    - The `sdram_cs_n` signal activates the SDRAM for command processing when asserted low. When this signal is deasserted (high), the SDRAM disregards any inputs on its command bus.
    - During initialization and command cycles, the CPU can control `sdram_cs_n` through the bypass register in HPDMC to manually drive the SDRAM chip select as needed.
    - In bypass mode, writing to this register issues a single transaction to the SDRAM, where the `sdram_cs_n` value is effective for one clock cycle, and then returns to its default inactive state.
  - **[Interconnection]:**
    - Directly controlled by the CPU in bypass mode using the bypass register, allowing low-level initialization and command control over SDRAM operations.
    - Works in conjunction with other SDRAM control signals such as `WE`, `RAS`, and `CAS` within the command protocol for accurate command handling.
  - **[Additional information]:**
    - Designed to operate only during specific CPU-controlled sequences, particularly in the absence of automatic initialization by the HPDMC hardware. Ensures flexibility in SDRAM control without requiring continuous assertion.
**[Related Signals]:** WE, RAS, CAS, bypass register, SDRAM command bus"
hpdmc,sdram_we_n,"Here’s the extracted information on the `sdram_we_n` (SDRAM Write Enable, active low) signal based on the provided design specification:
**[Signal name]:** sdram_we_n
**[Description]:**
  - **[Definition]:** Active-low Write Enable (WE) signal for SDRAM, used to control write operations on the SDRAM module.
  - **[Functionality]:**
    - The `sdram_we_n` signal initiates write commands when asserted low. When high, the write functionality is inactive, allowing other SDRAM commands to proceed without write access.
    - During initialization or specific command sequences, the CPU can drive `sdram_we_n` through the bypass register. This allows low-level control over the SDRAM’s command bus and precise timing for memory access commands.
    - In bypass mode, a write to this register activates `sdram_we_n` for one clock cycle, with the signal reverting to its default inactive state after the cycle completes.
  - **[Interconnection]:**
    - Works in conjunction with other control signals, such as `CS`, `RAS`, and `CAS`, to form a complete command for the SDRAM, specifically during write transactions.
    - Part of the SDRAM command protocol, managed through the bypass register for CPU-controlled sequences or by the SDRAM management unit during automatic operations.
  - **[Additional information]:**
    - Essential for precise timing and command issuance during initialization sequences or custom memory access routines, as managed through the HPDMC’s control interface.
**[Related Signals]:** CS, RAS, CAS, bypass register, SDRAM command bus"
hpdmc,sdram_cas_n,"Here’s the extracted information on the `sdram_cas_n` (SDRAM Column Address Strobe, active low) signal based on the provided design specification:
**[Signal name]:** sdram_cas_n
**[Description]:**
  - **[Definition]:** Active-low Column Address Strobe (CAS) signal for SDRAM, used to initiate column-related commands within the SDRAM.
  - **[Functionality]:**
    - The `sdram_cas_n` signal, when asserted low, initiates a column address operation on the SDRAM. This signal is used as part of read and write commands that specify column locations in memory.
    - It is controlled by the CPU via the bypass register during initialization or specific memory transactions. In bypass mode, writing to this register activates `sdram_cas_n` for one clock cycle, then the signal returns to its default inactive state.
  - **[Interconnection]:**
    - Used with `sdram_cs_n`, `sdram_we_n`, and `sdram_ras_n` to form complete memory commands, controlling specific read or write operations.
    - Managed in conjunction with the SDRAM command bus via the bypass register to allow direct CPU control during system initialization or low-level configuration.
  - **[Additional information]:**
    - Essential during the SDRAM initialization phase or when custom low-level access is required. `sdram_cas_n` contributes to the overall command protocol in SDRAM transactions, ensuring correct column selection for data access.
**[Related Signals]:** sdram_cs_n, sdram_we_n, sdram_ras_n, bypass register, SDRAM command bus"
hpdmc,sdram_ras_n,"Here’s the extracted information on the `sdram_ras_n` (SDRAM Row Address Strobe, active low) signal based on the provided design specification:
**[Signal name]:** sdram_ras_n
**[Description]:**
  - **[Definition]:** Active-low Row Address Strobe (RAS) signal for SDRAM, used to initiate row-related commands within the SDRAM.
  - **[Functionality]:**
    - The `sdram_ras_n` signal, when asserted low, initiates a row address operation, crucial for accessing specific rows within the SDRAM.
    - This signal is essential for managing row-level memory operations such as activating rows before read/write transactions and precharging rows after operations.
    - Controlled by the CPU through the bypass register during initialization sequences and specific SDRAM command operations. In bypass mode, writing to this register asserts `sdram_ras_n` for one clock cycle before returning to its default inactive state.
  - **[Interconnection]:**
    - Functions with other SDRAM control signals, including `sdram_cs_n`, `sdram_we_n`, and `sdram_cas_n`, to construct complete memory commands within the SDRAM protocol.
    - Works as part of the SDRAM command bus and aligns with control sequences initiated through the bypass register, allowing direct command execution by the CPU.
  - **[Additional information]:**
    - Plays a critical role in SDRAM initialization and row management, enabling low-level access control and precise handling of memory commands as directed by the CPU or HPDMC’s command sequences.
**[Related Signals]:** sdram_cs_n, sdram_we_n, sdram_cas_n, bypass register, SDRAM command bus"
hpdmc,sdram_adr,"Here’s the extracted information on the `sdram_adr` (SDRAM Address Bus) signal based on the provided design specification:
**[Signal name]:** sdram_adr
**[Description]:**
  - **[Definition]:** Address bus for SDRAM, used to specify row and column addresses for read and write operations within the SDRAM.
  - **[Functionality]:**
    - The `sdram_adr` signal holds the current address information sent to the SDRAM for accessing specific memory locations.
    - In bypass mode, the CPU can directly control `sdram_adr` through the bypass register to provide custom initialization and address control, which enables direct memory access during initialization without involving the HPDMC's automatic address handling.
    - During command execution, the `sdram_adr` bus updates synchronously with command signals (like CS, WE, RAS, and CAS) to select the appropriate rows and columns in the SDRAM.
  - **[Interconnection]:**
    - Works closely with other SDRAM control signals (e.g., `sdram_cs_n`, `sdram_we_n`, `sdram_ras_n`, `sdram_cas_n`) to form complete SDRAM commands that target specific memory addresses.
    - Linked to the SDRAM command bus, which the HPDMC or CPU manages depending on the operation mode, ensuring accurate address delivery for all memory operations.
  - **[Additional information]:**
    - Synchronization of the `sdram_adr` and command signals allows complex commands (e.g., mode register loads) to be executed with single writes to the bypass register. This design aids in reducing the complexity of memory control logic, especially during initialization sequences.
**[Related Signals]:** sdram_cs_n, sdram_we_n, sdram_ras_n, sdram_cas_n, bypass register, SDRAM command bus"
hpdmc,sdram_ba,"Here’s the extracted information on the `sdram_ba` (SDRAM Bank Address) signal based on the provided design specification:
**[Signal name]:** sdram_ba
**[Description]:**
  - **[Definition]:** Bank Address bus for SDRAM, specifying the bank within SDRAM for row and column commands.
  - **[Functionality]:**
    - The `sdram_ba` signal holds the bank address for memory commands, which enables targeted read/write operations within a specific bank.
    - When in bypass mode, `sdram_ba` is managed directly by the CPU using the bypass register, allowing low-level access to select banks for initialization and configuration without the need for automatic controller handling.
    - This bank address can be altered on the command cycle, allowing for efficient SDRAM bank management in response to active commands such as row activation or precharging.
  - **[Interconnection]:**
    - Works closely with other SDRAM control signals, such as `sdram_cs_n`, `sdram_ras_n`, `sdram_cas_n`, and `sdram_we_n`, to ensure accurate bank addressing and operation completion.
    - Part of the SDRAM command bus, controlled by either the HPDMC’s SDRAM management unit or directly by the CPU in bypass mode for initialization and special operations.
  - **[Additional information]:**
    - Synchronization with the command signals is critical, allowing seamless transitions between banks during complex SDRAM operations. The `sdram_ba` signal contributes to efficient handling of row and column selections across multiple banks.
**[Related Signals]:** sdram_cs_n, sdram_we_n, sdram_ras_n, sdram_cas_n, bypass register, SDRAM command bus"
hpdmc,sdram_dm,"Here’s the extracted information on the `sdram_dm` (SDRAM Data Mask) signal based on the provided design specification:
**[Signal name]:** sdram_dm
**[Description]:**
  - **[Definition]:** Data Mask signal for SDRAM, used to selectively mask data during write operations to the memory.
  - **[Functionality]:**
    - The `sdram_dm` signal specifies which data bytes should be masked during write operations to SDRAM. When asserted, it prevents specific data bytes from being written, allowing for partial-word writes.
    - Used in conjunction with the data bus during write cycles, it controls which bytes are affected, making it essential for managing byte-level data masking.
  - **[Interconnection]:**
    - Works alongside the SDRAM data lines to control data masking at the byte level, enabling efficient data manipulation and selective updates in memory.
    - Operates as part of the data path controller, ensuring correct data masking is applied in sync with the command and data lines.
  - **[Additional information]:**
    - This signal enhances data handling efficiency by supporting selective writes, crucial in applications requiring precise data control, such as error correction or specific byte updates.
**[Related Signals]:** SDRAM data lines, data path controller"
hpdmc,dqs_psen,"Here’s the extracted information on the `dqs_psen` (DQS Phase Shift Enable) signal based on the provided design specification:
**[Signal name]:** dqs_psen
**[Description]:**
  - **[Definition]:** DQS Phase Shift Enable signal, which activates phase shift control for the DQS clock in the HPDMC.
  - **[Functionality]:**
    - The `dqs_psen` signal enables phase shift adjustments for the DQS clock, allowing fine-tuning of the data strobe phase relative to the system clock.
    - Controlled by the delay register, this signal, along with `dqs_psincdec` and `dqs_psdone`, manages the 90-degree phase shift required to align DQS with the system clock for optimal timing during SDRAM data operations.
    - When asserted, `dqs_psen` initiates the phase shift, which is then incremented or decremented as specified by the accompanying phase increment/decrement control bits.
  - **[Interconnection]:**
    - Works closely with the Digital Clock Manager (DCM) to apply the phase shift effectively. Signals `dqs_psincdec` and `dqs_psdone` are essential for the complete phase adjustment process, providing control and feedback, respectively.
    - Part of the delay control interface, which relies on IDELAY elements to manage precise timing adjustments across the data path.
  - **[Additional information]:**
    - This phase shift configuration is vital for aligning data signals during high-speed transfers in SDRAM. It provides the flexibility to optimize timing margins, crucial for maintaining data integrity across different operational conditions.
**[Related Signals]:** dqs_psincdec, dqs_psdone, DCM, IDELAY, system clock"
hpdmc,dqs_psincdec,"Here’s the extracted information on the `dqs_psincdec` (DQS Phase Shift Increment/Decrement) signal based on the provided design specification:
**[Signal name]:** dqs_psincdec
**[Description]:**
  - **[Definition]:** DQS Phase Shift Increment/Decrement signal, controlling the adjustment direction for the DQS clock phase shift.
  - **[Functionality]:**
    - The `dqs_psincdec` signal, when used alongside `dqs_psen` (DQS Phase Shift Enable), specifies the direction of phase shift adjustment for the DQS clock. This signal is crucial in fine-tuning DQS alignment by incrementing or decrementing the phase shift.
    - Increments the DQS phase shift when asserted with `dqs_psen`. When not asserted, it decrements the phase shift, allowing precise control over DQS timing to align data capture with the system clock.
  - **[Interconnection]:**
    - Directly connected to the DCM and interacts with `dqs_psen` to initiate controlled phase shifts for the DQS signal. It is part of the delay register interface managed by IDELAY elements to maintain alignment with data timing.
    - `dqs_psincdec` works with `dqs_psdone` as a feedback mechanism, confirming successful phase shifts.
  - **[Additional information]:**
    - This phase control mechanism is vital in optimizing data read/write timing margins in high-speed SDRAM communication. The phase shift adjustment, based on `dqs_psincdec`, enhances the alignment of DQS with SDRAM timing requirements.
**[Related Signals]:** dqs_psen, dqs_psdone, DCM, IDELAY, delay register"
hpdmc,dqs_psdone,"Here’s the extracted information on the `dqs_psdone` (DQS Phase Shift Done) signal based on the provided design specification:
**[Signal name]:** dqs_psdone
**[Description]:**
  - **[Definition]:** DQS Phase Shift Done signal, which indicates the completion of a phase shift adjustment for the DQS clock.
  - **[Functionality]:**
    - The `dqs_psdone` signal serves as a status flag, indicating when the phase shift operation on the DQS clock is complete. This signal is essential for synchronizing phase shift adjustments with the DQS clock.
    - Used in conjunction with `dqs_psen` (DQS Phase Shift Enable) and `dqs_psincdec` (DQS Phase Shift Increment/Decrement), it provides feedback to the system to confirm that a requested phase shift increment or decrement has been successfully applied.
  - **[Interconnection]:**
    - Closely tied to the Digital Clock Manager (DCM), which handles the actual phase shift adjustments. It interacts with `dqs_psen` and `dqs_psincdec` as part of a feedback loop to ensure accurate control of the DQS timing.
    - Part of the delay register interface, which manages timing adjustments with the help of IDELAY elements.
  - **[Additional information]:**
    - The `dqs_psdone` signal allows the CPU or HPDMC controller to monitor phase shift readiness, ensuring that DQS timing adjustments are correctly applied, thus optimizing data strobe alignment with the SDRAM requirements.
**[Related Signals]:** dqs_psen, dqs_psincdec, DCM, IDELAY, delay register"
hpdmc,pll_stat,"Here’s the extracted information on the `pll_stat` (PLL Status) signal based on the provided design specification:
**[Signal name]:** pll_stat
**[Description]:**
  - **[Definition]:** PLL Status signal, providing monitoring inputs for clock status from the Digital Clock Managers (DCMs) used within HPDMC.
  - **[Functionality]:**
    - The `pll_stat` signal retrieves the values of PLL status inputs, which are used to monitor the operational status of DCMs. This includes checking the stability and readiness of clocks generated by the DCMs for the SDRAM and DQS clocks.
    - Each status input is internally double-latched within HPDMC to safely handle asynchronous signals, providing a stable status indication to the control interface.
  - **[Interconnection]:**
    - This signal interfaces directly with the delay register and DCMs, supporting real-time monitoring of clock conditions that affect data timing and synchronization.
    - Allows the CPU or control logic to validate the clock signal readiness before proceeding with critical SDRAM operations that rely on stable clocking.
  - **[Additional information]:**
    - By confirming the status of DCM-generated clocks, `pll_stat` contributes to the overall reliability and timing management of the memory controller, helping to prevent timing-related issues during high-speed memory transactions.
**[Related Signals]:** DCM, delay register, system clock, DQS"