spec_name,signal_name,information
i2c,NA,"Here is the mapping information:
[wb_clk_i]: Master clock input
[wb_rst_i]: Synchronous reset, active high
[arst_i]: Asynchronous reset input
[wb_stb_i]: Strobe signal / Core select input
[wb_ack_o]: Bus cycle acknowledge output
[wb_inta_o]: Interrupt signal output
[wb_adr_i]: Lower address bits for Wishbone interface
[wb_dat_i]: Data input to the core
[wb_cyc_i]: Valid bus cycle input
[wb_dat_o]: Data output from the core
[wb_we_i]: Write enable signal
[scl_pad_i]: Serial Clock (SCL) line input
[scl_pad_o]: Serial Clock (SCL) line output
[sda_pad_i]: Serial Data (SDA) line input
[sda_pad_o]: Serial Data (SDA) line output
[scl_pad_oe]: Serial Clock (SCL) line output enable
[sda_pad_oe]: Serial Data (SDA) line output enable
[ctr]: Control register
[sr]: Status register
[prer]: Clock Prescale Register
[txr]: Transmit register
[rxr]: Receive register
[cr]: Command register

Here is the architecture overview:
Below is a high-level summary of the I2C-Master Core architecture workflow, based entirely on the specification document. It reflects how the various blocks (shown in Fig. 5.1 and the state diagram) work together to carry out I2C transactions.
### 1. WISHBONE Interface
- **Purpose**: Acts as the main bus interface for the core. It provides signals such as `wb_clk_i`, `wb_rst_i`, address (`wb_adr_i`), data input (`wb_dat_i`), data output (`wb_dat_o`), and control signals (`wb_we_i`, `wb_stb_i`, `wb_cyc_i`, `wb_ack_o`, `wb_inta_o`).
- **Operation**:  
  - The CPU or system master writes to and reads from the I2C core’s registers (Prescale, Control, Command, Transmit, Receive, and Status) through this interface.  
  - All output signals from the core are registered, and each bus access takes 2 clock cycles.
### 2. Prescale Register & Clock Generator
- **Prescale Register**:  
  - Holds an integer value used to divide down the incoming master clock (`wb_clk_i`) to generate the internal SCL frequency (5× the target SCL).  
  - Must be programmed when the core is disabled (`EN = 0` in the Control register).  
- **Clock Generator**:  
  - Produces the internal 4× or 5× SCL clock enable signals that drive the Bit Command Controller.  
  - Manages clock stretching if a slave holds SCL low, ensuring correct synchronization on the I2C bus.
### 3. Control & Status Registers
- **Control Register** (`CTR` at address 0x02):  
  - Enables or disables (`EN` bit) the I2C core.  
  - Enables or disables (`IEN` bit) the core’s interrupt mechanism.  
- **Status Register** (`SR` read-only at address 0x04):  
  - Reflects real-time conditions such as `RxACK` (received ACK), `Busy` (bus busy), `AL` (arbitration lost), `TIP` (transfer in progress), and `IF` (interrupt flag).
### 4. Command Register & Byte Command Controller
- **Command Register** (`CR` write-only at address 0x04):  
  - Bits like `STA` (start), `STO` (stop), `RD` (read), `WR` (write), and `ACK` (acknowledge control) drive high-level I2C actions.  
  - The Byte Command Controller interprets these bits and breaks them down into individual bit-level operations.
- **Byte Command Controller**:  
  - Works at the byte level, orchestrating sequences like:  
    1. Generating START (or repeated START).  
    2. Writing/Reading a byte to/from the slave.  
    3. Checking or sending ACK/NACK.  
    4. Generating STOP if required.  
  - Transitions between states (Idle → START → WRITE or READ → ACK → STOP) based on the command bits.
### 5. Bit Command Controller
- **Purpose**: Executes the actual low-level signaling on `SCL` and `SDA`:
  - Splits each byte operation into 5 phases (Idle, A, B, C, D) or 4 phases for STOP.  
  - Drives SDA and SCL high/low to generate START, STOP, data bits, and acknowledge bits.  
  - Monitors bus conditions to detect arbitration loss or clock stretching.
- **Arbitration & Clock Stretching**:  
  - Because I2C is a multi-master bus, the Bit Command Controller checks for collisions (e.g., SDA driven high while another device pulls it low).  
  - If arbitration is lost, the controller sets the `AL` bit in the Status Register and halts the transfer.
### 6. DataIO Shift Register, Transmit & Receive Registers
- **Transmit Register** (`TXR` at address 0x03, write-only):  
  - Holds the next byte (or slave address + R/W bit) to be transmitted on the bus.  
  - Contents are loaded into the DataIO Shift Register before shifting out on SDA.  
- **Receive Register** (`RXR` at address 0x03, read-only):  
  - Holds the last byte received from the bus after a read operation completes.  
- **DataIO Shift Register**:  
  - Shifts data out during writes or latches data in during reads.  
  - After one byte is fully shifted in, it transfers the data to `RXR`.  
  - For writes, it is loaded from `TXR` first, then shifted out bit-by-bit.
### 7. Typical Transaction Flow
1. **Configuration**:  
   - Disable the core (`EN = 0`) and write the prescale value to achieve the desired SCL.  
   - Enable the core (`EN = 1`) and optionally enable interrupts (`IEN = 1`).  
2. **Generate START & Slave Address**:  
   - Write slave address and R/W bit to `TXR`.  
   - Write the `STA` + `WR` (or `RD`) command to `CR` to initiate a start condition and address transfer.  
   - The Byte Command Controller sets `TIP`, indicating a transfer in progress.  
3. **Byte-by-Byte Read/Write**:  
   - Once the transfer completes, `TIP` clears and `IF` (interrupt flag) sets if interrupts are enabled.  
   - Check `RxACK` to see if the slave acknowledged.  
   - For **write**: write next data byte to `TXR`, set `WR` bit in `CR`.  
   - For **read**: set `RD` bit in `CR` (and decide whether to ACK or NACK in `ACK` bit).  
4. **Generate STOP**:  
   - Once the final byte is transferred, set `STO` in `CR` to generate a stop condition and release the bus.
### 8. Summary
Putting it all together, the I2C-Master Core’s architecture uses:
- A **WISHBONE interface** for control and status access,
- A **Prescale Register** and **Clock Generator** for I2C clock management,
- A **Byte Command Controller** to orchestrate high-level I2C transactions (start, stop, read, write),
- A **Bit Command Controller** to handle bit-level timing and signals on the SDA and SCL lines,
- **Transmit/Receive Registers** and a **DataIO Shift Register** to manage data movement.
This layered approach allows software (through WISHBONE) to issue simple commands while the core handles the complexities of the I2C protocol under the hood.

Here is information extracted from each waveforms in the specification:

**[Waveform Name]:** I2C Protocol Standard Communication (Section 4.2)
**[Signals]:**  
- **SCL** (Serial Clock)  
- **SDA** (Serial Data)  
**[Interdependence Analysis]:**  
- **[Timing Relationship]:**  
  - Each data bit on SDA is sampled during the high phase of SCL.  
  - SDA transitions are valid while SCL is low; SDA must remain stable while SCL is high (except for START/STOP).  
  - The **START** (S) condition occurs when SDA transitions from high to low while SCL is high.  
  - The **STOP** (P) condition occurs when SDA transitions from low to high while SCL is high.  
  - Each byte transfer spans 9 SCL cycles (8 data bits + 1 ACK/NACK bit).
- **[Causal Dependencies]:**  
  - The **master** drives SDA for the address bits (A7–A1), the R/W bit, and the data bits (D7–D0).  
  - The **slave** drives SDA during the ACK/NACK bit.  
  - The master also initiates both START and STOP conditions.
- **[State Transitions]:**  
  1. **Idle** (SCL and SDA both high).  
  2. **START** (SDA goes low while SCL is high).  
  3. **Slave Address + R/W** bit on SDA (bits A7–A1 + R/W).  
  4. **ACK** from slave (SDA driven low by slave).  
  5. **Data Byte** transfer (D7–D0).  
  6. **ACK** or **NACK** from slave.  
  7. **STOP** (SDA goes high while SCL is high) or Repeated START if continuing.
- **[Protocol/Handshaking Mechanisms]:**  
  - The master issues an address and R/W bit, waits for the slave to ACK.  
  - On write operations, the master sends data and expects ACK from the slave each byte.  
  - On read operations, the master reads data from the slave and must provide ACK or NACK.  
  - The bus is released after the master issues a STOP (or continues with a Repeated START).
- **[Additional Observations]:**  
  - This diagram shows a single-byte transaction (address phase + one data byte).  
  - The same sequence repeats for multi-byte transfers, with repeated ACK/NACK cycles.  
  - No other signals (interrupts, internal enables, etc.) are shown in this waveform.  
  
**[Waveform Name]:** Clock Synchronization in a Multi-Master Environment (Section 4.3.1)
**[Signals]:**  
- **SCL1** (Master1’s clock)  
- **SCL2** (Master2’s clock)  
- **wired-AND SCL** (Actual bus clock line as seen on the I2C bus)
**[Interdependence Analysis]:**
- **[Timing Relationship]:**  
  - Because of the wired-AND connection on the bus, if any master pulls SCL low, the bus remains low.  
  - The bus clock transitions to high only when *all* masters release the line to high.  
  - Each master begins counting its own low and high periods, but the actual SCL on the bus follows the master with the longer low period (stretching the low phase) and the shortest high period (releasing the line sooner).
- **[Causal Dependencies]:**  
  - The actual bus clock (wired-AND SCL) depends on *both* Master1 (SCL1) and Master2 (SCL2). Whichever drives SCL low “dominates” the bus line.  
  - A master cannot force the line high if another master is still driving it low.
- **[State Transitions]:**  
  1. **Low Phase Start:** As soon as one master pulls SCL low, the bus line goes low.  
  2. **Wait/Stretch State:** If the other master’s low period is longer, the bus remains low until that master also releases it.  
  3. **High Phase Start:** When all masters release the line (stop driving it low), SCL transitions high.  
  4. **Repeat Cycle:** Both masters proceed with their clock cycles, but the wired-AND nature keeps them synchronized to the slowest master’s low period and the earliest master’s high release.
- **[Protocol/Handshaking Mechanisms]:**  
  - This mechanism ensures multi-master clock synchronization on the I2C bus.  
  - Each master’s clock is effectively “merged” on the bus, preventing collisions or timing conflicts.
- **[Additional Observations]:**  
  - This clock synchronization is fundamental to I2C’s multi-master capability.  
  - The figure illustrates that the final bus clock (wired-AND SCL) is shaped by overlapping low periods from all masters involved.
  
**[Waveform Name]:** Bit Command Controller Operations (Section 5.3)
**[Signals]:**  
- **SCL** (Serial Clock)  
- **SDA** (Serial Data)  
**[Interdependence Analysis]:**  
- **[Timing Relationship]:**  
  - Each single-bit operation (Start, Repeated Start, Stop, Write, Read) is divided into multiple sub-states: Idle plus A, B, C, D for most operations (Stop uses Idle + A, B, C).  
  - During Write and Read operations, SCL transitions define when SDA changes (or is sampled).  
  - For the **Start** and **Repeated Start** conditions, SDA transitions from high to low while SCL is high.  
  - For the **Stop** condition, SDA transitions from low to high while SCL is high.
- **[Causal Dependencies]:**  
  - The **Byte Command Controller** instructs the Bit Command Controller on whether to issue Start, Repeated Start, Stop, Write, or Read.  
  - The Bit Command Controller then drives or samples SDA in synchronization with SCL according to the sub-state sequence (A → B → C → D).  
  - The bus lines (SCL, SDA) are driven low or released (for high) depending on the current sub-state, ensuring correct I2C signaling.
- **[State Transitions]:**  
  1. **Idle**: Both SCL and SDA are stable/inactive before a command begins.  
  2. **A/B/C/D (for Start/Write/Read)**: These sub-states step through specific timing points to set or sample SDA and toggle SCL accordingly.  
  3. **Stop**: Occurs in four phases (Idle + A, B, C), where SDA transitions high while SCL is high at the final phase.  
  4. **Repeated Start**: Similar to Start but occurs without a preceding Stop; it uses the same four-phase approach as Start.
- **[Protocol/Handshaking Mechanisms]:**  
  - The **Start** or **Repeated Start** signals the beginning of a new transfer or repeated transfer without releasing the bus.  
  - The **Stop** signals the release of the bus.  
  - **Write** cycles shift data out on SDA and clock it with SCL.  
  - **Read** cycles shift data in from SDA (slave drives SDA), sampled by the master on SCL edges.
- **[Additional Observations]:**  
  - Each bit operation is carefully subdivided to respect I2C timing (setup/hold times, stable SDA during SCL high, etc.).  
  - The diagram shows a conceptual breakdown of how the core internally sequences SCL and SDA for each operation."
i2c,wb_clk_i,"
[Signal Name]: wb_clk_i
[Description]:
    [Definition]: 1-bit wide input signal serving as the Master clock for the I2C cores WISHBONE interface.
    [Functionality]: Provides the system clock that drives all synchronous operations in the core. It is used as the reference for deriving the SCL clock through the prescale register (e.g., with wb_clk_i = 32MHz to achieve a desired SCL frequency of 100KHz).
    [Interconnection]: Part of the WISHBONE interface, it interfaces with other signals such as wb_rst_i, wb_dat_i, wb_dat_o, wb_adr_i, wb_we_i, wb_stb_i, wb_cyc_i, wb_ack_o, and wb_inta_o. It feeds into the Clock Generator and other internal blocks that require a stable clock.
    [Additional information]: The accuracy of wb_clk_i is crucial since its frequency directly impacts the timing of I2C transactions. Proper configuration of the prescale register based on wb_clk_i ensures reliable I2C operation.
[Related Signals]: wb_rst_i, wb_dat_i, wb_dat_o, wb_adr_i, wb_we_i, wb_stb_i, wb_cyc_i, wb_ack_o, wb_inta_o"
i2c,wb_rst_i,"
[Signal Name]: wb_rst_i
[Description]:
    [Definition]: 1-bit input signal serving as the synchronous reset, active high.
    [Functionality]: Resets the I2C core in a synchronous manner, ensuring that the system’s registers and internal logic are initialized to a known state during reset cycles. It operates in coordination with the master clock (wb_clk_i).
    [Interconnection]: Part of the WISHBONE interface; works together with wb_clk_i to control the synchronous operation of the core. It is used in conjunction with the alternative asynchronous reset (arst_i), where one reset type is selected and the other is tied to a constant inactive state.
    [Additional information]: Although wb_rst_i is the synchronous reset, the spec recommends that for FPGA implementations, using arst_i may reduce cell usage and improve performance.
[Related Signals]: wb_clk_i, arst_i"
i2c,arst_i,"
[Signal name]: arst_i
[Description]:
    [Definition]: 1-bit input signal acting as an Asynchronous Reset for the I2C core.
    [Functionality]: Provides an asynchronous reset path, typically beneficial in FPGA implementations. It initializes or clears internal registers and logic asynchronously, without waiting for a clock edge.
    [Interconnection]: Part of the core’s reset scheme along with wb_rst_i. Only one of these reset signals should be used in a given design, with the other tied to its inactive level.
    [Additional information]: 
        - Not WISHBONE-compliant.
        - Potentially reduces cell usage and improves timing in FPGAs due to dedicated asynchronous reset routing.
[Related Signals]: wb_rst_i"
i2c,wb_stb_i,"
[Signal name]: wb_stb_i
[Description]:
    [Definition]: 1-bit input signal, serving as the Strobe signal/Core select input for the I2C core.
    [Functionality]: Indicates that the I2C core is selected for a transaction, working in tandem with wb_cyc_i to validate bus cycles and trigger register accesses.
    [Interconnection]: Part of the WISHBONE interface, interfacing with signals such as wb_cyc_i, wb_adr_i, wb_dat_i, and wb_we_i to control data transfer and core selection.
    [Additional information]: Ensures that the core is only accessed when a valid bus cycle is active, thereby preventing unintended register accesses.
[Related Signals]: wb_cyc_i, wb_adr_i, wb_dat_i, wb_we_i, wb_ack_o, wb_clk_i"
i2c,wb_ack_o,"
[Signal name]: wb_ack_o
[Description]:
    [Definition]: 1-bit output signal serving as the Bus cycle acknowledge output.
    [Functionality]: Acknowledges that a valid bus cycle (read or write operation) has been completed by the core. The signal is asserted after processing the transaction, typically following a 2 clock cycle access.
    [Interconnection]: Part of the WISHBONE interface, it interacts with wb_clk_i, wb_stb_i, wb_cyc_i, wb_dat_i, and wb_dat_o to manage synchronous data transfers between the core and the system bus.
    [Additional information]: Being a registered signal, wb_ack_o ensures reliable, clock-aligned acknowledgement, confirming the successful completion of each bus transaction.
[Related Signals]: wb_clk_i, wb_stb_i, wb_cyc_i, wb_dat_i, wb_dat_o, wb_rst_i"
i2c,wb_inta_o,"
[Signal name]: wb_inta_o
[Description]:
    [Definition]: 1-bit output signal serving as the Interrupt signal output from the I2C core.
    [Functionality]: Asserts when an interrupt condition is present—triggered by internal events such as a completed byte transfer or arbitration loss. This occurs when the interrupt flag (IF) in the Status register is set and the interrupt enable (IEN) bit in the Control register is active.
    [Interconnection]: Part of the WISHBONE interface, it interfaces with the system's interrupt controller or processor. It operates alongside internal registers (Control register’s IEN and Status register’s IF) and other bus signals (e.g., wb_clk_i) to manage interrupt-driven operations.
    [Additional information]: Being a registered signal, wb_inta_o is synchronized with the master clock, ensuring reliable timing for interrupt notifications.
[Related Signals]: IEN (Control register), IF (Status register), wb_clk_i, wb_rst_i, wb_cyc_i, wb_stb_i, wb_ack_o"
i2c,wb_adr_i,"
[Signal name]: wb_adr_i
[Description]:
    [Definition]: 3-bit wide input signal that provides the lower address bits for accessing the core's register file.
    [Functionality]: Directs read and write operations to specific registers (e.g., PRERlo, PRERhi, CTR, TXR/RXR, CR/SR) within the I2C core. It works in conjunction with other WISHBONE signals to ensure the correct register is targeted during transactions.
    [Interconnection]: Part of the WISHBONE interface; it interfaces with the address decoding logic along with signals such as wb_stb_i (strobe), wb_cyc_i (bus cycle), wb_dat_i, wb_dat_o, and wb_we_i to manage register access.
    [Additional information]: Since the I2C core register map is small, only the lower 3 bits are needed, covering addresses from 0x00 to 0x04 as defined in the specification.
[Related Signals]: wb_stb_i, wb_cyc_i, wb_dat_i, wb_dat_o, wb_we_i, wb_clk_i, wb_rst_i"
i2c,wb_dat_i,"
[Signal name]: wb_dat_i
[Description]:
    [Definition]: 8-bit wide input signal that carries data from the system bus towards the I2C core.
    [Functionality]: Used to write data into the core’s registers during bus cycles, including updates to the Prescale registers, Control register, and Transmit register.
    [Interconnection]: Part of the WISHBONE interface, interfacing with wb_adr_i, wb_we_i, wb_stb_i, wb_cyc_i, wb_clk_i, and wb_rst_i to ensure proper data transfer during register write operations.
    [Additional information]: This signal is essential for configuring and controlling the I2C core, as it allows the processor to provide necessary configuration and operational data.
[Related Signals]: wb_adr_i, wb_we_i, wb_stb_i, wb_cyc_i, wb_clk_i, wb_rst_i"
i2c,wb_cyc_i,"
[Signal name]: wb_cyc_i
[Description]:
    [Definition]: 1-bit wide input signal that indicates the validity of a bus cycle on the WISHBONE interface.
    [Functionality]: Signals that a valid bus cycle is in progress, ensuring the core processes transactions only when an active bus cycle is present. Works with wb_stb_i to validate the current transaction.
    [Interconnection]: Part of the WISHBONE interface; it interfaces with signals such as wb_stb_i, wb_adr_i, wb_dat_i, wb_dat_o, wb_we_i, and wb_ack_o to coordinate data transfers.
    [Additional information]: Essential for proper transaction timing, wb_cyc_i ensures that the I2C core only responds during valid bus cycles, contributing to reliable system communication.
[Related Signals]: wb_stb_i, wb_adr_i, wb_dat_i, wb_dat_o, wb_we_i, wb_ack_o, wb_clk_i, wb_rst_i"
i2c,wb_dat_o,"
[Signal Name]: wb_dat_o
[Description]:
    [Definition]: 8-bit wide output signal that carries data from the I2C core through the WISHBONE interface.
    [Functionality]: Outputs data generated by the core, such as register contents from RXR, status registers, or other read operations. Being a registered output, it ensures that data is stable and synchronized with the master clock, with each access taking 2 clock cycles.
    [Interconnection]: Part of the WISHBONE interface; it works in tandem with other signals like wb_dat_i (data input), wb_clk_i (master clock), wb_rst_i (reset), wb_adr_i, wb_we_i, wb_stb_i, wb_cyc_i, and wb_ack_o to ensure proper data transfer between the core and the system bus.
    [Additional information]: The registered nature of wb_dat_o ensures that data is captured and held stable during bus cycles, making it crucial for reliable communication and accurate status reporting within the I2C core.
[Related Signals]: wb_clk_i, wb_dat_i, wb_ack_o, wb_rst_i, wb_adr_i, wb_we_i, wb_stb_i, wb_cyc_i, wb_inta_o"
i2c,wb_we_i,"
[Signal name]: wb_we_i
[Description]:
    [Definition]: 1-bit input signal that serves as the Write Enable signal for the I2C core.
    [Functionality]: Determines the type of bus cycle operation; when asserted, it enables writing data into the core’s registers, and when deasserted, the cycle is interpreted as a read operation.
    [Interconnection]: Part of the WISHBONE interface, it interacts with signals such as wb_cyc_i, wb_stb_i, wb_adr_i, wb_dat_i, wb_dat_o, and wb_ack_o to manage data transfers and control operations within the core.
    [Additional information]: Crucial for differentiating between register write and read cycles, ensuring that data is properly routed into or out of the I2C core during valid bus transactions.
[Related Signals]: wb_cyc_i, wb_stb_i, wb_adr_i, wb_dat_i, wb_dat_o, wb_ack_o, wb_clk_i, wb_rst_i"
i2c,scl_pad_i,"
[Signal name]: scl_pad_i
[Description]:
    [Definition]: 1-bit input signal representing the Serial Clock (SCL) line input for the I2C interface.
    [Functionality]: Captures the external SCL signal used for synchronizing I2C data transfers. It monitors the clock state on an open-drain bus where the SCL line is pulled-up to VCC.
    [Interconnection]: Part of the external connections for the I2C interface; it interfaces with the tri-state buffer system (along with scl_pad_o and scl_pad_oe) that manages the bidirectional SCL line.
    [Additional information]: External pull-up resistors are required on the SCL line due to the open-drain/open-collector nature of I2C outputs. In FPGA implementations, automatic tri-state buffer insertion can be used to manage this signal.
[Related Signals]: scl_pad_o, scl_pad_oe, sda_pad_i, sda_pad_o, sda_pad_oe"
i2c,scl_pad_o,"
[Signal name]: scl_pad_o
[Description]:
    [Definition]: 1-bit output signal representing the Serial Clock (SCL) line output for the I2C interface.
    [Functionality]: Drives the SCL line during I2C transactions when enabled by the associated output enable (scl_pad_oe). In conjunction with external pull-up resistors, it ensures proper clock signaling by actively pulling the line low or allowing it to float high.
    [Interconnection]: Part of the external connections for the I2C interface; it interfaces with scl_pad_i and scl_pad_oe within a tri-state buffer arrangement to manage the bidirectional nature of the I2C clock line.
    [Additional information]: Due to the open-drain nature of the I2C bus, external pull-up resistors are required to pull the SCL line high when scl_pad_o is not actively driving the line. Proper tri-state buffer implementation (as illustrated by the provided VHDL/Verilog code) is essential for correct I2C communication.
[Related Signals]: scl_pad_i, scl_pad_oe, sda_pad_i, sda_pad_o, sda_pad_oe"
i2c,sda_pad_i,"
[Signal name]: sda_pad_i
[Description]:
    [Definition]: 1-bit input signal representing the Serial Data (SDA) line input for the I2C interface.
    [Functionality]: Samples the external SDA line state for data transfers in I2C communication. As part of an open-drain bus, it receives the logic level (pulled up externally by resistors) that reflects the current data on the SDA line.
    [Interconnection]: Integrated in the external connections of the I2C interface; works with tri-state buffering elements (sda_pad_o and sda_pad_oe) to manage the bidirectional nature of the SDA signal. The internal SDA signal is connected to the physical bus via these buffers.
    [Additional information]: Proper operation requires external pull-up resistors on the SDA line due to its open-drain configuration. In FPGA implementations, tri-state buffers may be automatically inserted to facilitate correct signal routing.
[Related Signals]: sda_pad_o, sda_pad_oe, scl_pad_i, scl_pad_o, scl_pad_oe"
i2c,sda_pad_o,"
[Signal name]: sda_pad_o
[Description]:
    [Definition]: 1-bit output signal representing the Serial Data (SDA) line output for the I2C interface.
    [Functionality]: Drives the SDA line during I2C transactions when enabled by the associated output enable (sda_pad_oe). In conjunction with external pull-up resistors, it transmits data on the open-drain I2C bus, actively pulling the line low when required, and releasing it to high impedance when not in use.
    [Interconnection]: Works together with sda_pad_i (input) and sda_pad_oe (output enable) in a tri-state buffer configuration. This arrangement ensures proper control of the bidirectional SDA line, coordinating data transmission and reception in the I2C core.
    [Additional information]: Because the I2C protocol uses open-drain outputs, the SDA line is pulled up externally by resistors when sda_pad_o is not driving the line. FPGA implementations may utilize automatic tri-state buffer insertion for managing this signal effectively.
[Related Signals]: sda_pad_i, sda_pad_oe, scl_pad_i, scl_pad_o, scl_pad_oe"
i2c,scl_pad_oe,"
[Signal name]: scl_pad_oe
[Description]:
    [Definition]: 1-bit output signal serving as the output enable for the Serial Clock (SCL) line.
    [Functionality]: Controls the tri-state buffer for the SCL line. When enabled (active as per the VHDL/Verilog examples), it allows scl_pad_o to drive the SCL line; when disabled, it places the SCL line in a high-impedance state, allowing external pull-up resistors to pull the line high.
    [Interconnection]: Part of the I2C external connections; it interfaces with scl_pad_i and scl_pad_o within a tri-state buffer configuration to manage the bidirectional nature of the SCL line.
    [Additional information]: Essential for the open-drain operation of the I2C bus, scl_pad_oe ensures that the SCL line is properly driven during communication or left tri-stated when not in use. In FPGA implementations, automatic tri-state buffer insertion may utilize this signal.
[Related Signals]: scl_pad_i, scl_pad_o, sda_pad_i, sda_pad_o, sda_pad_oe"
i2c,sda_pad_oe,"
[Signal name]: sda_pad_oe
[Description]:
    [Definition]: 1-bit output signal serving as the Serial Data (SDA) line output enable.
    [Functionality]: Controls the tri-state buffer for the SDA line. When active (as shown in the provided VHDL/Verilog examples), it disables the SDA driver (placing the line in high impedance) so that external pull-up resistors can pull the line high. When inactive, it allows sda_pad_o to drive the SDA line.
    [Interconnection]: Works in conjunction with sda_pad_o and sda_pad_i within a tri-state buffer configuration to manage the bidirectional nature of the SDA line in the I2C interface.
    [Additional information]: Essential for open-drain operation on the I2C bus, sda_pad_oe enables the proper alternation between driving the SDA line low and leaving it in a high-impedance state. FPGA implementations may utilize automatic tri-state buffer insertion based on this signal.
[Related Signals]: sda_pad_i, sda_pad_o, scl_pad_i, scl_pad_o, scl_pad_oe"
i2c,ctr,"
[Signal name]: ctr
[Description]:
    [Definition]: 8-bit wide, read/write register located at address 0x02, serving as the Control register for the I2C core.
    [Functionality]: 
        - Bit 7 (EN): I2C core enable bit. '1' enables the core; '0' disables it.
        - Bit 6 (IEN): I2C core interrupt enable bit. '1' enables interrupts; '0' disables them.
        - Bits 5:0: Reserved and must be written as zeros.
        - The register controls whether the core accepts new commands and enables interrupt generation.
    [Interconnection]: Interfaces with the internal control logic of the I2C core and works in conjunction with the Command register (CR) and Status register (SR) to manage I2C operations. It is accessed via the WISHBONE interface.
    [Additional information]: 
        - Reset value is 0x00 (core disabled and interrupts off by default).
        - The core processes new commands only when the EN bit is set. Clear EN only when no transfer is in progress (e.g., after a STOP command or when the STO bit is set).
[Related Signals]: EN, IEN, CR, SR"
i2c,sr,"
[Signal name]: sr
[Description]:
    [Definition]: 8-bit wide, read-only Status register located at address 0x04 that reflects the current operational state of the I2C core.
    [Functionality]:
        - Bit 7 (RxACK): Indicates the acknowledge status from the slave ('1' = no acknowledge, '0' = acknowledge received).
        - Bit 6 (Busy): Indicates the I2C bus status ('1' = bus busy after a START signal, '0' = bus free after a STOP signal).
        - Bit 5 (AL): Arbitration lost flag, set when arbitration is lost (e.g., due to unexpected STOP conditions or SDA conflicts).
        - Bits 4:2: Reserved bits that always read as zero.
        - Bit 1 (TIP): Transfer In Progress flag ('1' = data transfer in progress, '0' = transfer complete).
        - Bit 0 (IF): Interrupt Flag, set when an interrupt condition is pending (triggering a processor interrupt if IEN is enabled).
    [Interconnection]: Interfaces with the internal control logic of the I2C core; works in conjunction with the Control register (IEN) and Command register to manage I2C transactions.
    [Additional information]: Reset value is 0x00. Reserved bits (4:2) are maintained as zeros for forward compatibility.
[Related Signals]: RxACK, Busy, AL, TIP, IF, IEN, CR"
i2c,prer,"
[Signal name]: prer
[Description]:
    [Definition]: A 16-bit register (comprised of PRERlo at 0x00 and PRERhi at 0x01) used to set the clock division factor for generating the I2C SCL clock.
    [Functionality]: Divides the master clock (wb_clk_i) to produce the desired SCL frequency. The I2C core uses a clock that is 5 times the SCL frequency internally, so the prescale value must be programmed as: (wb_clk_i / (5 * desired SCL frequency)) - 1. This ensures accurate SCL timing for proper I2C communication.
    [Interconnection]: Directly influences the Clock Generator block, interfacing with wb_clk_i to generate the SCL clock. It is critical for configuring the timing of the I2C interface.
    [Additional information]: The prescale register should only be updated when the I2C core is disabled (i.e., when the EN bit in the Control register is cleared). Its reset value is 0xFFFF. For example, with a 32MHz master clock and a desired SCL frequency of 100KHz, the value is computed using the formula above.
[Related Signals]: wb_clk_i, ctr (EN bit), SCL clock output"
i2c,txr,"
[Signal name]: txr
[Description]:
    [Definition]: 8-bit wide, write-only register located at address 0x03, known as the Transmit register.
    [Functionality]: 
        - Bits 7:1: Hold the next byte to be transmitted via the I2C bus.
        - Bit 0: Serves dual purposes:
            • In data transfers, it represents the data’s least significant bit.
            • In slave address transfers, it functions as the R/W bit (‘1’ for reading from the slave, ‘0’ for writing to the slave).
    [Interconnection]: Integrated within the I2C core’s register set and accessed via the WISHBONE interface. Its contents are loaded into the DataIO Shift Register for serial transmission on the SDA line, working in conjunction with the Command (CR) and Status (SR) registers.
    [Additional information]: 
        - The reset value of the register is 0x00.
        - Correct programming of TXR is essential for accurate I2C transactions, both for transmitting data and for setting the correct slave address transfer mode.
[Related Signals]: DataIO Shift Register, CR, SR, RXR"
i2c,rxr,"
[Signal name]: rxr
[Description]:
    [Definition]: 8-bit wide, read-only register located at address 0x03 that holds the last byte received via I2C.
    [Functionality]: Stores the byte received from the I2C bus after a read operation. The DataIO Shift Register transfers the received data into RXR, making it available for the processor via the WISHBONE interface.
    [Interconnection]: Accessed as part of the I2C core’s register set through the WISHBONE interface. It works in conjunction with the DataIO Shift Register, the Command register (for initiating read operations), and the Status register (which signals transfer completion).
    [Additional information]: The reset value of the register is 0x00.
[Related Signals]: txr, DataIO Shift Register, cr, sr"
i2c,cr,"
[Signal Name]: cr (Command Register)
[Description]:
    [Definition]: 8-bit wide, write-only Command register located at address 0x04.
    [Functionality]:
        - Bit 7 (STA): Generates a (repeated) start condition.
        - Bit 6 (STO): Generates a stop condition.
        - Bit 5 (RD): Initiates a read operation from a slave.
        - Bit 4 (WR): Initiates a write operation to a slave.
        - Bit 3 (ACK): Determines acknowledgment behavior (ACK = ‘0’ for acknowledge, NACK = ‘1’ for not acknowledge).
        - Bit 0 (IACK): Acknowledges and clears a pending interrupt.
            Note: Bits 2:1 are reserved and must be written as zeros; the command bits are automatically cleared after execution and are always read as zeros.
    [Interconnection]: Interfaces with the Byte Command Controller and Bit Command Controller to orchestrate I2C transactions. It works in conjunction with the Transmit Register (TXR) for data output and the Status Register (SR) for status feedback.
    [Additional information]: The reset value of the Command register is 0x00. Writing to this register triggers the core's I2C operations such as start, stop, read, and write commands, ensuring proper sequencing of the I2C communication protocol.
[Related Signals]: STA, STO, RD, WR, ACK, IACK, TXR, SR"